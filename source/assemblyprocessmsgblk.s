 .cpu cortex-m0
.syntax unified
.text
.globl ISHAProcessMessageBlock
.type ISHAProcessMessageBlock, %function
  ISHAProcessMessageBlock:
   push    {r4, r5, r6, r7, lr}   //  temp variable is caluculated.
   movs    r3, #88
   mov     lr, r11
   mov     r11, r0
   mov     r7, r10
   mov     r6, r9
   mov     r5, r8
   add     r3, r11
   //  temp variable is caluculated till here.
   mov     r10, r3
   movs    r3, #27
   mov     r1, r11
   push    {r5, r6, r7, lr}       // D = ctx->MD[3] is generated by moving #27 to r3.
   ldr     r4, [r0, #12]          // A = ctx->MD[0] is executed
   ldr     r6, [r0, #0]           // B = ctx->MD[1] is executed
   ldr     r5, [r0, #4]           // C = ctx->MD[2] is executed
   ldr     r7, [r0, #8]           // E = ctx->MD[4] is executed
   ldr     r0, [r0, #16]
   sub     sp, #36
   mov     r9, r3
   subs    r3, #25
   mov     r8, r3
   str     r6, [sp, #12]
   str     r5, [sp, #16]
   str     r7, [sp, #20]
   str     r4, [sp, #24]
   str     r0, [sp, #28]
   //for loop from t = 0 to t < 16 is executed till here.
   adds    r1, #24
   b.n     L1
L2:
   movs    r4, r7        //(ISHACircularShift(5,A) + ((B & C) | ((~B) & D)) + E + is calculated
   movs    r6, r3
   movs    r7, r2
L1:
   ldrb    r3, [r1, #0]
   ldrb    r2, [r1, #1]
   lsls    r3, r3, #24
   lsls    r2, r2, #16
   orrs    r3, r2
   ldrb    r2, [r1, #3]
   orrs    r3, r2
   ldrb    r2, [r1, #2]
   adds    r1, #4
   lsls    r2, r2, #8
   orrs    r3, r2              //(ISHACircularShift(5,A) + ((B & C) | ((~B) & D)) + E + is executed
   movs    r2, r7
   eors    r2, r4
   ands    r2, r5
   eors    r2, r4
   str     r3, [sp, #4]
   str     r2, [sp, #8]
   movs    r3, r6
   mov     r2, r9
   rors    r3, r2
   mov     r12, r3
   ldr     r2, [sp, #8]
   ldr     r3, [sp, #4]
   add     r2, r12
   adds    r3, r3, r2
   adds    r3, r3, r0       // ISHACircularShift(30,B) is executed
   movs    r2, r5
   mov     r0, r8
   movs    r5, r6
   rors    r2, r0                 //for loop from 0 to 16 is executed
   movs    r0, r4
   cmp     r10, r1
   bne.n   L2
   ldr     r1, [sp, #12]           //(ctx->MD[0] + A) & 0xFFFFFFFF is executed and stored in ctx->MD[0]
   mov     r12, r1
   mov     r1, r11
   add     r3, r12
   str     r3, [r1, #0]
   ldr     r3, [sp, #16]
   mov     r12, r3                   //(ctx->MD[2] + C) & 0xFFFFFFFF is executed and stored in ctx->MD[2]
   ldr     r3, [sp, #20]            // (ctx->MD[1] + B) & 0xFFFFFFFF is executed and stored in ctx->MD[1]
   add     r6, r12
   mov     r12, r3                  // (ctx->MD[3] + D) & 0xFFFFFFFF is executed and stored in ctx->MD[3]
   ldr     r3, [sp, #24]
   add     r2, r12
   mov     r12, r3                    //(ctx->MD[4] + E) & 0xFFFFFFFF is executed and stored in ctx->MD[4]
   ldr     r3, [sp, #28]             //(ctx->MD[3] + D) & 0xFFFFFFFF is executed and stored in ctx->MD[3]
   add     r7, r12
   mov     r12, r3                   //ctx->MB_Idx = 0
   movs    r3, #0
   add     r4, r12                   //(ctx->MD[1] + B) & 0xFFFFFFFF is executed and stored in ctx->MD[1]
   str     r6, [r1, #4]
   str     r2, [r1, #8]
   str     r7, [r1, #12]
   str     r4, [r1, #16]             //From str r7 to str r4 ,ctx->MB_Idx = 0 is executed
   str     r3, [r1, #88]
   add     sp, #36
   pop     {r4, r5, r6, r7}
   mov     r11, r7
   mov     r10, r6
   mov     r9, r5
   mov     r8, r4
   pop     {r4, r5, r6, r7, pc}      //End of code
